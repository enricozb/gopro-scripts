#!/usr/bin/env bash
# inspired by https://gist.github.com/noln/8ba9632775c63685e83c3534cbd83079

set -e

usage() {
  echo "usage: compress INPUT OUTPUT [,][MODE = l,m,s,t]"
  echo ",: whether or not to stabilize"
  echo "MODE: size of output (large/medium/small/tiny)"
  echo "example: compress input.mp4 output.mp4 ,m"
  exit 1
}

parseargs() {
  if [ $# -lt 2 ]; then
    echo 'not enough arguments'
    usage
  fi

  tmp=$(mktemp -d)
  echo "$tmp"
  input="$1"
  output="$2"
  mode="$3"
  if [ "${mode:0:1}" = ',' ]; then
    mode="${mode:1}"
    stabilize=true
  fi

  if [ -f "$output" ]; then
    echo "output already exists: $output"
    usage
  fi
}

stabilize() {
  echo 'stabilizing...'

  # additional comma is for appending the scale transform during compression
  transform="vidstabtransform=input=$tmp/vectors.trf:smoothing=20,unsharp=5:5:0.8:3:3:0.4,"
  : | ffmpeg -i "$input" -vf "vidstabdetect=stepsize=32:shakiness=10:accuracy=15:result=$tmp/vectors.trf" -f null - >"$tmp/stabilize.log" 2>&1
}

compress() {
  echo 'compressing...'

  case "${mode}" in
  l) # 2.7k / 2704p
    transform="${transform}scale=2704:1520"
    ;;

  m) # 1440p
    transform="${transform}scale=1920:1440"
    ;;

  s | '') # 1080p (default)
    transform="${transform}scale=1920:1080"
    ;;

  t) # 720p
    transform="${transform}scale=1280:720"
    ;;

  *)
    echo "invalid mode: $mode"
    usage
    ;;
  esac

  : | ffmpeg -i "$input" -vf "$transform" -c:v libx265 -crf 28 -preset fast "$output" >"$tmp/compress.log" 2>&1
}

main() {
  parseargs "$@"

  if [ "$stabilize" = true ]; then
    stabilize
  fi

  compress
}

main "$@"
